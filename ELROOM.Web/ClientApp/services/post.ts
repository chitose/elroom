
// Auto generated by typewriter from c# code. Update coresponding c# code to re-generate this file.
import {HttpClientAPI} from '../components/httpClientProvider';

import {Post} from '../model/post';
import {Reaction} from '../model/reaction';
import {UserPost} from '../model/userPost';
import {PollOption} from '../model/pollOption';
import {PollVote} from '../model/pollVote';
import {Comment} from '../model/comment';
import {AppUser} from '../model/appUser';
import {UserGroup} from '../model/userGroup';
import {Group} from '../model/group';
import {Invitations} from '../model/invitations';
import {NotificationUser} from '../model/notificationUser';
import {Notification} from '../model/notification';
import {CommentsResponse} from '../model/commentsResponse';
import {PostsReponseData} from '../model/postsReponseData';
import { ReactionType } from '../model/enums';

export function get_getPost_URL(id: number) {
  return `/api/post/GetPost${id}`;
}export function get_getFullImage_URL(id: number) {
  return `/api/post/getFullImage${id}`;
}export function get_getCommentImage_URL(id: number) {
  return `/api/post/getCommentImage${id}`;
}export function get_getComments_URL(id: number, offset: number, length: number) {
  return `/api/post/getComments{id,offset,length}?id=${id}&offset=${offset}&length=${length}`;
}export function get_getFollowingPosts_URL(offset: number, length: number) {
  return `/api/post/getFollowingPosts{offset,length}?offset=${offset}&length=${length}`;
}export function get_getHostPosts_URL(offset: number, length: number) {
  return `/api/post/getHostPosts{offset,length}?offset=${offset}&length=${length}`;
}export function get_getPostWithPolls_URL(offset: number, length: number) {
  return `/api/post/getPostPolls{offset,length}?offset=${offset}&length=${length}`;
}
export function getPost(api: HttpClientAPI,id: number) {
  return api.http<Post>(`/api/post/GetPost${id}`, { method: 'get'  });
}
export function getFullImage(api: HttpClientAPI,id: number) {
  return api.http<any>(`/api/post/getFullImage${id}`, { method: 'get'  });
}
export function getCommentImage(api: HttpClientAPI,id: number) {
  return api.http<any>(`/api/post/getCommentImage${id}`, { method: 'get'  });
}
export function createOrUpdatePost(api: HttpClientAPI,request: Post) {
  return api.http<Post>(`/api/post/createOrUpdatePost`, { method: 'post' , body: JSON.stringify(request) });
}
export function deletePost(api: HttpClientAPI,request: Post) {
  return api.http<boolean>(`/api/post/deletePost`, { method: 'post' , body: JSON.stringify(request) });
}
export function vote(api: HttpClientAPI,id: number, pollVote: PollVote) {
  return api.http<PollVote>(`/api/post/vote${id}`, { method: 'post' , body: JSON.stringify(pollVote) });
}
export function reactPost(api: HttpClientAPI,reaction: Reaction) {
  return api.http<Reaction>(`/api/post/reactPost`, { method: 'post' , body: JSON.stringify(reaction) });
}
export function followPost(api: HttpClientAPI,post: UserPost) {
  return api.http<UserPost>(`/api/post/followPost`, { method: 'post' , body: JSON.stringify(post) });
}
export function postComment(api: HttpClientAPI,comment: Comment) {
  return api.http<Comment>(`/api/post/postComment`, { method: 'post' , body: JSON.stringify(comment) });
}
export function getComments(api: HttpClientAPI,id: number, offset: number, length: number) {
  return api.http<CommentsResponse>(`/api/post/getComments{id,offset,length}?id=${id}&offset=${offset}&length=${length}`, { method: 'get'  });
}
export function getFollowingPosts(api: HttpClientAPI,offset: number, length: number) {
  return api.http<PostsReponseData>(`/api/post/getFollowingPosts{offset,length}?offset=${offset}&length=${length}`, { method: 'get'  });
}
export function getHostPosts(api: HttpClientAPI,offset: number, length: number) {
  return api.http<PostsReponseData>(`/api/post/getHostPosts{offset,length}?offset=${offset}&length=${length}`, { method: 'get'  });
}
export function getPostWithPolls(api: HttpClientAPI,offset: number, length: number) {
  return api.http<PostsReponseData>(`/api/post/getPostPolls{offset,length}?offset=${offset}&length=${length}`, { method: 'get'  });
}
